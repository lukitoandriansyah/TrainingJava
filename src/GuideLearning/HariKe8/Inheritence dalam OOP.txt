Sumber Belajar:
https://www.petanikode.com/java-oop-inheritance/

Belajar Java OOP: Memahami inheritence dan Method Overriding

Seperti yang sudah kita pelajari pada tulisan sebelumnya: sebuah class atau 
objek bisa saling berhubungan dengan class yang lain.

Salah satu bentuk hubungannya adalah inheritance (pewarisan). Hubungan ini  
seperti hubungan keluarga antara orang tua dan anak.

Sebuah class di Java, bisa memiliki satu atau lebih keturunan atau class 
anak. Class anak akan memiliki warisan properti dan method dari class ibu.

Secara sederhana dapat dikatakan bahwa seluruh properti yang dimiliki oleh 
kelas induk akan dimiliki juga oleh kelas anak. 

untuk mengetehaui bahaa suatu class merupakan kelas turunan dari kelas induk, biasanya terdapat
penulisan 'extends' 

Berikut adalah contoh kodingan sederhana untuk menjelaskan terkait
inheritenece:

public class BangunDatar {
    
    float luas(){
        System.out.println("Menghitung laus bangun datar");
        return 0;
    }
    
    float keliling(){
        System.out.println("Menghitung keliling bangun datar");
        return 0;
    }
    
}

public class Persegi extends BangunDatar {
    float sisi;   
}

public class Lingkaran extends BangunDatar{
    
    // jari-jari lingkaran
    float r;
    
}

public class PersegiPanjang extends BangunDatar {
    float panjang;
    float lebar;
}

public class Segitiga extends BangunDatar {
    
    float alas;
    float tinggi;
    
}

public class SelfLearning.Main {
    public static void main(String[] args) {
        
        // membuat objek bangun datar
        BangunDatar bangunDatar = new BangunDatar();
        
        // membuat objek persegi dan mengisi nilai properti
        Persegi persegi = new Persegi();
        persegi.sisi = 2;
        
        // membuat objek Lingkaran dan mengisi nilai properti
        Lingkaran lingkaran = new Lingkaran();
        lingkaran.r = 22;
        
        // membuat objek Persegi Panjang dan mengisi nilai properti
        PersegiPanjang persegiPanjang = new PersegiPanjang();
        persegiPanjang.panjang = 8;
        persegiPanjang.lebar = 4;
        
        // membuat objek Segitiga dan mengisi nilai properti
        Segitiga mSegitiga = new Segitiga();
        mSegitiga.alas = 12;
        mSegitiga.tinggi = 8;
        
        
        // memanggil method luas dan keliling
        bangunDatar.luas();
        bangunDatar.keliling();
        
        persegi.luas();
        persegi.keliling();
        
        lingkaran.luas();
        lingkaran.keliling();
        
        persegiPanjang.luas();
        persegiPanjang.keliling();
        
        mSegitiga.luas();
        mSegitiga.keliling();
    }
}

Hasil dari program tersebut jika dijalankan adalah sebagai berikut:
Menghitung luas bangun datar
Menghitung keliling bangun datar
Menghitung luas bangun datar
Menghitung keliling bangun datar
Menghitung luas bangun datar
Menghitung keliling bangun datar
Menghitung luas bangun datar
Menghitung keliling bangun datar
Menghitung luas bangun datar
Menghitung keliling bangun datar


Mengapa hasilnya seperti itu?
Karena yang kita panggil sebenarnya adalah method luas() dan keliling() 
milik si induk (BangunDatar).
Objek anak dari BangunDatar belum memiliki method luas() dan keliling(), 
akhirnya mengambil milik induknya.
Lalu bagaimana kalau kita ingin membuat agar semua class anak memiliki 
method luas() dan keliling() yang berbeda dari induk?
Jawabanya: menggunakan method overriding.


Method Overriding?
Method Overriding dilakukan saat kita ingin membuat ulang sebuah method 
pada sub-class atau class anak.

Method Overriding dapat dibuat dengan menambahkan anotasi @Override di atas 
nama method atau sebelum pembuatan method.

Kode di atas jika kita tambahkan methode overriding, akan menjadi seperti 
berikut:

public class BangunDatar {
    
    float luas(){
        System.out.println("Menghitung laus bangun datar");
        return 0;
    }
    
    float keliling(){
        System.out.println("Menghitung keliling bangun datar");
        return 0;
    }
    
}

class Persegi extends BangunDatar {
    float sisi;

    @Override
    float luas(){
        float luas = sisi * sisi;
        System.out.println("Luas Persegi: " + luas);
        return luas;
    }

    @Override
    float keliling(){
        float keliling = 4 * sisi;
        System.out.println("Keliling Persegi: " + keliling);
        return keliling;
    }
}

public class Lingkaran extends BangunDatar{
    
    // jari-jari lingkaran
    float r;
    
    @Override
    float luas(){
        float luas = (float) (Math.PI * r * r);
        System.out.println("Luas lingkaran: " + luas);
        return luas;
    }
    
    @Override
    float keliling(){
        float keliling = (float) (2 * Math.PI * r);
        System.out.println("Keliling Lingkaran: " + keliling);
        return keliling;
    }
    
}

public class PersegiPanjang extends BangunDatar {
    float panjang;
    float lebar;
    
    @Override
    float luas(){
        float luas = panjang * lebar;
        System.out.println("Luas Persegi Panjang:" + luas);
        return luas;
    }
    
    @Override
    float keliling(){
        float kll = 2*panjang + 2*lebar;
        System.out.println("Keliling Persegi Panjang: " + kll);
        return kll;
    }
}

public class Segitiga extends BangunDatar {
    
    float alas;
    float tinggi;

    @Override
    float luas() {
        float luas = 1/2 * (alas * tinggi);
        System.out.println("Luas Segitiga: " + luas);
        return luas;
    }   
    
}

public class SelfLearning.Main {
    public static void main(String[] args) {
        
        // membuat objek bangun datar
        BangunDatar bangunDatar = new BangunDatar();
        
        // membuat objek persegi dan mengisi nilai properti
        Persegi persegi = new Persegi();
        persegi.sisi = 2;
        
        // membuat objek Lingkaran dan mengisi nilai properti
        Lingkaran lingkaran = new Lingkaran();
        lingkaran.r = 22;
        
        // membuat objek Persegi Panjang dan mengisi nilai properti
        PersegiPanjang persegiPanjang = new PersegiPanjang();
        persegiPanjang.panjang = 8;
        persegiPanjang.lebar = 4;
        
        // membuat objek Segitiga dan mengisi nilai properti
        Segitiga mSegitiga = new Segitiga();
        mSegitiga.alas = 12;
        mSegitiga.tinggi = 8;
        
        
        // memanggil method luas dan keliling
        bangunDatar.luas();
        bangunDatar.keliling();
        
        persegi.luas();
        persegi.keliling();
        
        lingkaran.luas();
        lingkaran.keliling();
        
        persegiPanjang.luas();
        persegiPanjang.keliling();
        
        mSegitiga.luas();
        mSegitiga.keliling();
    }
}

Sekarang kita coba running program yang telah dibuat, hasilnya adalah:
Menghitung luas bangun datar
Menghitung keliling bangun datar
Luas Persegi: 4.0
Kelililng Persegi: 8.0
Luas Lingkaran: 1520.5309
Keliling Lingkaran: 138.23007
Luas Persegi Panjang: 32.0
Keliling Persegi Panjang: 24.0
Luas Segitiga: 96.0
Menghitung keliling bangun datar






