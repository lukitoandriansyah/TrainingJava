Belajar Java: Menggunakan Prosedur dan Fungsi untuk Membuat Sub-program?

Fungsi main() adalah fungsi utama dalam program Java. Semua kode yang kita 
tulis di dalamnya, akan langsung dieksekusi.

Tapi masalahnya sekarang:

“Bagaimana kalau kita membuat program yang cukup besar, apakah kita masih 
bisa menulis semua kodenya di dalam fungsi main()?”

Bisa-bisa saja, tapi kurang efektif dan akan menghabiskan banyak tenaga 
untuk mengetik kodenya.

Belum lagi kalau ada error…

“Lalu solusinya bagaimana?”

Solusinya menggunakan prosedur/fungsi.

Prosedur/fungsi dapat memecah program menjadi sub-sub program, sehingga 
kita bisa membuat program lebih efisien.

Penggunaan prosedur/fungsi dapat mengurangi pengetikan kode yang 
berulang-ulang.

Pengertian Prosedur, Fungsi, dan Method?

Ketiganya adalah hal yang sama.

Prosedur adalah sebutan untuk fungsi yang tidak mengembalikan nilai. 
Fungsi ini biasanya ditandai dengan kata kunci void.

Fungsi adalah sebutan untuk fungsi yang mengembalikan nilai.

Method adalah fungsi yang berada di dalam Class. Sebutan ini, biasanya 
digunakan pada OOP.

Cara membuat fungsi diJava?

Struktur dasar penulisan fungsi di Java

static TipeDataKembalin namaFungsi(){

}

Berikut adalah penjel;asannya:
Kata kunci static, artinya kita membuat fungsi yang dapat dipanggil tanpa 
harus membuat instansiasi objek.

TypeDataKembalian adalah tipe data dari nilai yang dikembalikan setelah 
fungsi dieksekusi.

namaFungsi() adalah nama fungsinya. Biasanya ditulis dengan huruf kecil di 
awalnya. Lalu, kalau terdapat lebih dari satu suku kata, huruf awal di kata 
kedua ditulis kapital.

contohnya:
static void ucapSalam(){
    System.out.println("Selamat Pagi");
}

*void dalam code tersebut berarti fungsi tersebut tidak mengembalikan nilai
apa-apa.

Full code nya sebagai berikut:

class BelajarFungsi {
    
    // membuat fungsi ucapSalam()
    static void ucapSalam(){
        System.out.println("Selamat Pagi");
    }

    // membuat fungsi main()
    public static void main(String[] args){
        // memanggil/eksekusi fungsi ucapSalam()
        ucapSalam();
    }
}

Fungsi dengan Parameter?
Parameter adalah variabel yang menampung nilai untuk diproses di dalam 
fungsi. Parameter berperan sebagai input untuk fungsi.

Struktur dasarnya seperti ini:

static TipeData namaFungsi(TipeData namaParameter, TipeData namaParameterLain){
    // kode fungsi
}
Penjelasan:

- Parameter ditulis di antara tanda kurung (...);
- Parameter harus diberikan tipe data;
- Bila terdapat lebih dari satu parameter, maka dipisah dengan tanda koma.
- Contoh fungsi yang memiliki parameter:

static void ucapin(String ucapan){
    System.out.println(ucapan);
}

Pada contoh tersebut, kita membuat parameter bernama ucapan dengan tipe 
String. Sehingga kita bisa menggunakan variabel ucapan di dalam fungsi.

Cara pemanggilan fungsi yang memiliki parameter:

ucapin("Hallo!");
ucapin("Selamat datang di pemrograman Java");
ucapin("Saya kira ini bagian terakhir");
ucapin("Sampai jumpa lagi, ya!");

Hasil outputnya:

Hallo!
Selamat datang di pemrograman Java
Saya kira ini bagian terakhir
Sampai jumpa lagi, ya!

Fungsi yang Mengembalikan Nilai?

Setelah fungsi memproses data yang diinputkan melalui parameter, 
selanjutnya fungsi harus mengembalikan nilai agar dapat diolah pada proses 
berikutnya.

Pengembalian nilai pada fungsi menggunakan kata kunci return.

Contoh:

static int luasPersegi(int sisi){
    int luas = sisi * sisi;
    return luas;
}

Pada contoh tersebut, kita membuat sebuah parameter bernama sisi. Kemudian 
fungsi akan mengembalikan nilai dengan tipe int (integer) dari variabel 
luas.

Contoh pemanggilanya:

System.out.println("Luas Persegi dengan panjang sisi 5 adalah " + luasPersegi(5));

Hasil Output:

Luas Persegi dengan panjang sisi 5 adalah 25

Pemanggilan Fungsi di Fungsi Lain?

Fungsi-fungsi dapat saling memanggil untuk memproses data.

Contoh, sebuah program Kalkulator Bangun Ruang memiliki fungsi-fungsi: 
luasPersegi(), luasPersegiPanjang(), luasSegitiga(), luasBalok(), 
luasKubus() dsb.

Fungsi-fungsi tersebut dapat saling membantu, contoh fungsi 
luasKubus() membutuhkan fungsi luasPersegi().

Rumus:

Luas Kubus = 6 *  luasPersegi;
Luas Persegi = sisi * sisi;

Maka programnya bisa dibuat seperti ini:

public class BangunRuang {

    public static void main(String[] args) {
        int s = 12;
        int luas = luasKubus(s);

        System.out.println(luas);
    }

    // membuat fungsi luasPersegi()
    static int luasPersegi(int sisi){
        return sisi * sisi;
    }

    // membuat fungsi luasKubus()
    static int luasKubus(int sisi){
        
        // memanggil fungsi luasPersegi
        return 6 * luasPersegi(sisi);
    }

}

Hasil output

864


Fungsi Static dan Non-Static?

Pada contoh-contoh diatas, kita menggunakan kata kunci static sebelum 
membuat fungsi.

Kata kunci static akan membuat fungsi dapat dieksekusi langsung, tanpa 
harus membuat instansiasi objek dari class.

Contoh:

public class FungsiStatic {
    
    // Fungsi non-static
    void makan(String makanan){
        System.out.println("Hi!");
        System.out.println("Saya sedang makan " + makanan);
    }
    
    // fungsi static
    static void minum(String minuman){
        System.out.println("Saya sedang minum " + minuman);
    }
    
    // fungsi main
    public static void main(String[] args) {
        
        // pemanggilan fungsi static
        minum("Kopi");
        
        
        // mambuat instansiasi objek saya dari class FungsiStatic
        FungsiStatic saya = new FungsiStatic();
        // pemanggilan fungsi non-static
        saya.makan("Nasi Goreng");
        
    }
    
}

Pada contoh tersebut, fungsi makan() adalah fungsi non-static. Sedangkan 
fungsi minum() adalah fungsi static.

Hasil output dari program di atas:

Saya sedang minum Kopi
Hi!
Saya sedang makan Nasi Goreng

Apabila kita tidak membuat objek untuk memanggil fungsi non-static, maka 
akan terjadi error.

Variabel Global dan Variabel Lokal pada Java?

Variabel global adalah variabel yang bisa diakses dari semua fungsi. 
Sedangkan variabel lokal adalah variabel yang hanya bisa diakses dari 
dalam fungsi tempat variabel itu berada.

Bingung?

Mari kita lihat contohnya:

class ProgramKu{

    // ini variabel global
    static String nama = "Programku";
    static String version = "1.0.0";

    static void help(){

        // ini variabel lokal
        String nama = "Petani Kode";

        // mengakses variabel global di dalam fungso help()
        System.out.println("Nama: " + nama);
        System.out.println("Versi: " + version);
    }

    public static void main(String args[]){
        
        // panggil fungsi help()
        help();
        
        System.out.println("Nama: " + nama);
        System.out.println("Versi: " + version);

    }

}

Hasil outputnya:

Nama: Petani Kode
Versi: 1.0.0
Nama: Programku
Versi: 1.0.0

Saat pemanggilan fungsi help() kita membuat ulang variabel nama. Sehingga 
variabel nama menjadi variabel lokal pada fungsi help() dan nilainya 
berubah menjadi "Petani Kode".

Sedangkan, saat kita akases lagi variabel nama melalui fungsi main() 
nilainya tetap sama seperti yang didefinisikan.



Mini Project:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class FungsiProsedur {
    
    static ArrayList listBuah = new ArrayList();
    static boolean isRunning = true;
    static InputStreamReader inputStreamReader = new InputStreamReader(System.in);
    static BufferedReader input = new BufferedReader(inputStreamReader);
    
    static void showMenu() throws IOException{
        
        System.out.println("========= MENU ========");
        System.out.println("[1] Show All Buah");
        System.out.println("[2] Insert Buah");
        System.out.println("[3] Edit Buah");
        System.out.println("[4] Delete Buah");
        System.out.println("[5] Exit");
        System.out.print("PILIH MENU> ");
        
        int selectedMenu = Integer.valueOf(input.readLine());
        
        switch(selectedMenu){
            case 1:
                showAllBuah();
                break;
            case 2:
                insertBuah();
                break;
            case 3:
                editBuah();
                break;
            case 4:
                deleteBuah();
                break;
            case 5:
                System.exit(0);
                break;
            default:
                System.out.println("Pilihan salah!");
                     
        }
        
        
    }

    static void showAllBuah(){
        if(listBuah.isEmpty()){
           System.out.println("Belum ada data");
        } else {
             // tampilkan semua buah
            for(int i = 0; i < listBuah.size(); i++){
                System.out.println(String.format("[%d] %s",i, listBuah.get(i)));
            }
        }
    }
    
    static void insertBuah() throws IOException{
        System.out.print("Nama buah: ");
        String namaBuah = input.readLine();
        listBuah.add(namaBuah);
    }
    
    static void editBuah() throws IOException{
        showAllBuah();
        System.out.print("Pilih nomer buah: ");
        int indexBuah = Integer.valueOf(input.readLine());
        
        System.out.print("Nama Baru: ");
        String namaBaru = input.readLine();
        
        // ubah nama buah
        listBuah.set(indexBuah, namaBaru);
    }
    
    static void deleteBuah() throws IOException{
        showAllBuah();
        System.out.print("Pilih nomer buah: ");
        int indexBuah = Integer.valueOf(input.readLine());
        // hapus buah
        listBuah.remove(indexBuah);
    }
    
    public static void main(String[] args) throws IOException {
        
        do {
            showMenu();
        } while (isRunning);
        
    }
    
}
